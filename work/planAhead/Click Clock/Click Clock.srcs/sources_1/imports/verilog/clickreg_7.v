/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module clickreg_7 (
    input clk,
    input rst,
    input buttonA,
    input buttonB,
    output reg state0,
    output reg state1,
    output reg [7:0] scoreout,
    output reg [7:0] try,
    output reg life,
    output reg [3:0] one,
    output reg [3:0] ten
  );
  
  
  
  reg bool;
  
  reg [31:0] rng;
  
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_14 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n)
  );
  
  wire [8-1:0] M_alu2_alu;
  wire [1-1:0] M_alu2_z;
  wire [1-1:0] M_alu2_v;
  wire [1-1:0] M_alu2_n;
  reg [6-1:0] M_alu2_alufn;
  reg [8-1:0] M_alu2_a;
  reg [8-1:0] M_alu2_b;
  alu_14 alu2 (
    .alufn(M_alu2_alufn),
    .a(M_alu2_a),
    .b(M_alu2_b),
    .alu(M_alu2_alu),
    .z(M_alu2_z),
    .v(M_alu2_v),
    .n(M_alu2_n)
  );
  
  wire [8-1:0] M_alu3_alu;
  wire [1-1:0] M_alu3_z;
  wire [1-1:0] M_alu3_v;
  wire [1-1:0] M_alu3_n;
  reg [6-1:0] M_alu3_alufn;
  reg [8-1:0] M_alu3_a;
  reg [8-1:0] M_alu3_b;
  alu_14 alu3 (
    .alufn(M_alu3_alufn),
    .a(M_alu3_a),
    .b(M_alu3_b),
    .alu(M_alu3_alu),
    .z(M_alu3_z),
    .v(M_alu3_v),
    .n(M_alu3_n)
  );
  
  wire [1-1:0] M_button_condA_out;
  reg [1-1:0] M_button_condA_in;
  button_conditioner_2 button_condA (
    .clk(clk),
    .in(M_button_condA_in),
    .out(M_button_condA_out)
  );
  wire [1-1:0] M_button_condB_out;
  reg [1-1:0] M_button_condB_in;
  button_conditioner_2 button_condB (
    .clk(clk),
    .in(M_button_condB_in),
    .out(M_button_condB_out)
  );
  wire [1-1:0] M_edge_detectorA_out;
  reg [1-1:0] M_edge_detectorA_in;
  edge_detector_4 edge_detectorA (
    .clk(clk),
    .in(M_edge_detectorA_in),
    .out(M_edge_detectorA_out)
  );
  wire [1-1:0] M_edge_detectorB_out;
  reg [1-1:0] M_edge_detectorB_in;
  edge_detector_4 edge_detectorB (
    .clk(clk),
    .in(M_edge_detectorB_in),
    .out(M_edge_detectorB_out)
  );
  reg M_stt0_d, M_stt0_q = 1'h0;
  reg M_stt1_d, M_stt1_q = 1'h0;
  reg [7:0] M_score_d, M_score_q = 1'h0;
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen_17 pn_gen (
    .clk(clk),
    .rst(rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  reg M_halflife_d, M_halflife_q = 1'h1;
  reg [3:0] M_ones_d, M_ones_q = 1'h0;
  reg [3:0] M_tenths_d, M_tenths_q = 1'h0;
  
  always @* begin
    M_tenths_d = M_tenths_q;
    M_stt1_d = M_stt1_q;
    M_score_d = M_score_q;
    M_halflife_d = M_halflife_q;
    M_stt0_d = M_stt0_q;
    M_ones_d = M_ones_q;
    
    bool = M_stt0_q || M_stt1_q;
    M_pn_gen_next = !bool;
    scoreout = M_score_q;
    M_button_condA_in = buttonA;
    M_button_condB_in = buttonB;
    M_edge_detectorA_in = M_button_condA_out;
    M_edge_detectorB_in = M_button_condB_out;
    state0 = M_stt0_q;
    state1 = M_stt1_q;
    life = M_halflife_q;
    one = M_ones_q;
    ten = M_tenths_q;
    rng = M_pn_gen_num;
    M_alu1_a = 1'h0;
    M_alu1_b = 1'h0;
    M_alu1_alufn = 6'h00;
    M_alu2_alufn = 6'h18;
    M_alu2_a = M_ones_q;
    M_alu2_b = 4'ha;
    M_alu3_alufn = 6'h33;
    M_alu3_a = M_alu2_alu;
    M_alu3_b = 8'h0a;
    if (M_alu3_alu == 8'h01) begin
      M_ones_d = 1'h0;
      M_alu1_a = M_tenths_q;
      M_alu1_b = 1'h1;
      M_tenths_d = M_alu1_alu[0+3-:4];
    end
    if (M_edge_detectorA_out) begin
      if (M_stt0_q == 1'h1) begin
        M_stt0_d = 1'h0;
        state0 = 1'h0;
        M_score_d = M_score_q + 1'h1;
        M_ones_d = M_ones_q + 1'h1;
      end else begin
        M_score_d = 1'h0;
        M_halflife_d = 1'h0;
      end
    end
    if (M_edge_detectorB_out) begin
      if (M_stt1_q == 1'h1) begin
        M_stt1_d = 1'h0;
        state1 = 1'h0;
        M_score_d = M_score_q + 1'h1;
        M_ones_d = M_ones_q + 1'h1;
      end else begin
        M_score_d = 1'h0;
        M_halflife_d = 1'h0;
      end
    end
    try = M_pn_gen_num[0+7-:8];
    if (rng >= 9'h12c && rng < 10'h258) begin
      M_stt1_d = 1'h1;
      state1 = 1'h1;
    end
    if (rng < 9'h12c) begin
      M_stt0_d = 1'h1;
      state0 = 1'h1;
    end
    M_pn_gen_seed = rng;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stt0_q <= 1'h0;
      M_stt1_q <= 1'h0;
      M_score_q <= 1'h0;
      M_halflife_q <= 1'h1;
      M_ones_q <= 1'h0;
      M_tenths_q <= 1'h0;
    end else begin
      M_stt0_q <= M_stt0_d;
      M_stt1_q <= M_stt1_d;
      M_score_q <= M_score_d;
      M_halflife_q <= M_halflife_d;
      M_ones_q <= M_ones_d;
      M_tenths_q <= M_tenths_d;
    end
  end
  
endmodule
