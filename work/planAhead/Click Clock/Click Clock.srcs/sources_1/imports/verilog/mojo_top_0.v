/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input reset,
    input buttonA,
    input buttonB,
    output reg led1,
    output reg led0,
    output reg ledA,
    output reg ledB
  );
  
  
  
  reg rst;
  
  reg [3:0] timer;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_button_condAA_out;
  reg [1-1:0] M_button_condAA_in;
  button_conditioner_2 button_condAA (
    .clk(clk),
    .in(M_button_condAA_in),
    .out(M_button_condAA_out)
  );
  wire [1-1:0] M_button_condBB_out;
  reg [1-1:0] M_button_condBB_in;
  button_conditioner_2 button_condBB (
    .clk(clk),
    .in(M_button_condBB_in),
    .out(M_button_condBB_out)
  );
  wire [1-1:0] M_edge_detectorAA_out;
  reg [1-1:0] M_edge_detectorAA_in;
  edge_detector_4 edge_detectorAA (
    .clk(clk),
    .in(M_edge_detectorAA_in),
    .out(M_edge_detectorAA_out)
  );
  wire [1-1:0] M_edge_detectorBB_out;
  reg [1-1:0] M_edge_detectorBB_in;
  edge_detector_4 edge_detectorBB (
    .clk(clk),
    .in(M_edge_detectorBB_in),
    .out(M_edge_detectorBB_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_4 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  localparam RNG_state = 2'd0;
  localparam GAMEEND_state = 2'd1;
  localparam START_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = START_state;
  wire [1-1:0] M_click_state0;
  wire [1-1:0] M_click_state1;
  wire [8-1:0] M_click_scoreout;
  wire [8-1:0] M_click_try;
  wire [1-1:0] M_click_life;
  wire [4-1:0] M_click_one;
  wire [4-1:0] M_click_ten;
  reg [1-1:0] M_click_buttonA;
  reg [1-1:0] M_click_buttonB;
  clickreg_7 click (
    .clk(clk),
    .rst(rst),
    .buttonA(M_click_buttonA),
    .buttonB(M_click_buttonB),
    .state0(M_click_state0),
    .state1(M_click_state1),
    .scoreout(M_click_scoreout),
    .try(M_click_try),
    .life(M_click_life),
    .one(M_click_one),
    .ten(M_click_ten)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_8 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [7-1:0] M_seg_score_seg;
  wire [2-1:0] M_seg_score_sel;
  reg [8-1:0] M_seg_score_values;
  multi_seven_seg_8 seg_score (
    .clk(clk),
    .rst(rst),
    .values(M_seg_score_values),
    .seg(M_seg_score_seg),
    .sel(M_seg_score_sel)
  );
  wire [8-1:0] M_dec_ctr_digits;
  wire [8-1:0] M_dec_ctr_timer;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_10 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits),
    .timer(M_dec_ctr_timer)
  );
  wire [1-1:0] M_ctr_value;
  counter_11 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~reset;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = 1'h0;
    M_seg_values = M_dec_ctr_digits;
    M_seg_score_values = 8'h00;
    io_seg = 4'h0;
    io_sel = 4'h0;
    M_click_buttonA = ~buttonA;
    M_click_buttonB = ~buttonB;
    led0 = M_click_state0;
    led1 = M_click_state1;
    ledA = !buttonA;
    ledB = !buttonB;
    M_button_condAA_in = buttonA;
    M_button_condBB_in = buttonB;
    M_edge_detectorAA_in = M_button_condAA_out;
    M_edge_detectorBB_in = M_button_condBB_out;
    
    case (M_state_q)
      START_state: begin
        M_seg_score_values = 8'h00;
        led = 8'hff;
        io_seg = ~M_seg_score_seg;
        io_sel = 4'h0;
        if (M_edge_detectorAA_out | M_edge_detectorBB_out) begin
          M_state_d = RNG_state;
        end
      end
      RNG_state: begin
        M_dec_ctr_inc = M_edge_detector_out;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        led = M_click_scoreout;
        io_led[0+7-:8] = M_click_try;
        timer = M_dec_ctr_timer[0+3-:4];
        if (timer == 1'h0) begin
          M_state_d = GAMEEND_state;
        end
        if (M_click_life == 1'h0) begin
          M_state_d = GAMEEND_state;
        end
      end
      GAMEEND_state: begin
        M_seg_score_values = {M_click_ten, M_click_one};
        led = 8'hff;
        io_seg = ~M_seg_score_seg;
        io_sel = ~M_seg_score_sel;
        led0 = 1'h0;
        led1 = 1'h0;
        M_click_buttonA = 1'h0;
        M_click_buttonB = 1'h0;
        ledA = 1'h0;
        ledB = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 2'h2;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
